{"ast":null,"code":"import faker from 'faker';\nimport sample from 'lodash/sample'; // utils\n\nimport { mockImgParkinglot } from '../utils/mockImages';\nconst PARKINGLOT_INFO = [{\n  using: true,\n  name: '주차장1',\n  code: 'AA001',\n  address: 'Long Beach, California'\n}, {\n  using: true,\n  name: 'Parking site No.113',\n  code: 'AB010',\n  address: 'Denver, Colorado'\n}, {\n  using: true,\n  name: 'Pretty Parkinglot',\n  code: 'AA025',\n  address: 'Honolulu, Hawaii'\n}, {\n  using: false,\n  name: 'Park☆',\n  code: 'CA009',\n  address: 'Moscow, Idaho'\n}, {\n  using: true,\n  name: 'Fav Spot',\n  code: 'AB100',\n  address: 'Iowa City, Iowa'\n}, {\n  using: true,\n  name: 'MY주차장',\n  code: 'CB001',\n  address: 'Beverly, Massachusetts'\n}, {\n  using: false,\n  name: '안쓰는주차장',\n  code: 'CB002',\n  address: 'Detroit, Michigan'\n}, {\n  using: true,\n  name: 'ParkCar',\n  code: 'CB003',\n  address: 'Philadelphia, Mississippi'\n}, {\n  using: false,\n  name: 'Park No.9',\n  code: 'AA030',\n  address: 'Columbus, Nebraska'\n}];\nconst PARKINGLOT_NAME = ['주차장1', 'Parking site No.113', 'Pretty Parkinglot', 'Park☆', 'Fav Spot', 'MY주차장', '안쓰는주차장', 'ParkCar', 'Park No.9'];\nconst PARKINGLOT_ADDRESS = ['Long Beach, California', 'Denver, Colorado', 'Honolulu, Hawaii', 'Moscow, Idaho', 'Iowa City, Iowa', 'Beverly, Massachusetts', 'Detroit, Michigan', 'Philadelphia, Mississippi', 'Columbus, Nebraska'];\nconst PARKINGLOT_CODES = ['AA001', 'AB010', 'AA025', 'CA009', 'AB100', 'CB001', 'CB002', 'CB003', 'AA030']; // const PARKINGLOT_COLOR = [\n//   '#00AB55',\n//   '#000000',\n//   '#FFFFFF',\n//   '#FFC0CB',\n//   '#FF4842',\n//   '#1890FF',\n//   '#94D82D',\n//   '#FFC107'\n// ];\n\nconst parkinglots = [...Array(9)].map((_, index) => {\n  const setIndex = index + 1;\n  return {\n    id: faker.datatype.uuid(),\n    cover: mockImgParkinglot(setIndex),\n    name: PARKINGLOT_INFO[index].name,\n    address: PARKINGLOT_INFO[index].address,\n    code: PARKINGLOT_INFO[index].code,\n    price: faker.datatype.number({\n      min: 4,\n      max: 99,\n      precision: 0.01\n    }),\n    priceSale: setIndex % 3 ? null : faker.datatype.number({\n      min: 19,\n      max: 29,\n      precision: 0.01\n    }),\n    // colors:\n    //   (setIndex === 1 && PARKINGLOT_COLOR.slice(0, 1)) ||\n    //   (setIndex === 2 && PARKINGLOT_COLOR.slice(0, 2)) ||\n    //   (setIndex === 3 && PARKINGLOT_COLOR.slice(0, 3)) ||\n    //   (setIndex === 4 && PARKINGLOT_COLOR.slice(0, 4)) ||\n    //   (setIndex === 5 && PARKINGLOT_COLOR.slice(0, 5)) ||\n    //   (setIndex === 6 && PARKINGLOT_COLOR.slice(0, 6)) ||\n    //   PARKINGLOT_COLOR,\n    status: sample(['sale', 'new', '', ''])\n  };\n});\nexport default parkinglots;","map":{"version":3,"sources":["C:/Users/woojo/source/repos/material-kit-react/frontend/src/_mocks_/parkinglots.js"],"names":["faker","sample","mockImgParkinglot","PARKINGLOT_INFO","using","name","code","address","PARKINGLOT_NAME","PARKINGLOT_ADDRESS","PARKINGLOT_CODES","parkinglots","Array","map","_","index","setIndex","id","datatype","uuid","cover","price","number","min","max","precision","priceSale","status"],"mappings":"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","sourcesContent":["import faker from 'faker';\nimport sample from 'lodash/sample';\n// utils\nimport { mockImgParkinglot } from '../utils/mockImages';\n\nconst PARKINGLOT_INFO = [\n  { using: true, name: '주차장1', code: 'AA001', address: 'Long Beach, California' },\n  { using: true, name: 'Parking site No.113', code: 'AB010', address: 'Denver, Colorado' },\n  { using: true, name: 'Pretty Parkinglot', code: 'AA025', address: 'Honolulu, Hawaii' },\n  { using: false, name: 'Park☆', code: 'CA009', address: 'Moscow, Idaho' },\n  { using: true, name: 'Fav Spot', code: 'AB100', address: 'Iowa City, Iowa' },\n  { using: true, name: 'MY주차장', code: 'CB001', address: 'Beverly, Massachusetts' },\n  { using: false, name: '안쓰는주차장', code: 'CB002', address: 'Detroit, Michigan' },\n  { using: true, name: 'ParkCar', code: 'CB003', address: 'Philadelphia, Mississippi' },\n  { using: false, name: 'Park No.9', code: 'AA030', address: 'Columbus, Nebraska' }\n];\n\nconst PARKINGLOT_NAME = [\n  '주차장1',\n  'Parking site No.113',\n  'Pretty Parkinglot',\n  'Park☆',\n  'Fav Spot',\n  'MY주차장',\n  '안쓰는주차장',\n  'ParkCar',\n  'Park No.9'\n];\n\nconst PARKINGLOT_ADDRESS = [\n  'Long Beach, California',\n  'Denver, Colorado',\n  'Honolulu, Hawaii',\n  'Moscow, Idaho',\n  'Iowa City, Iowa',\n  'Beverly, Massachusetts',\n  'Detroit, Michigan',\n  'Philadelphia, Mississippi',\n  'Columbus, Nebraska'\n];\n\nconst PARKINGLOT_CODES = [\n  'AA001',\n  'AB010',\n  'AA025',\n  'CA009',\n  'AB100',\n  'CB001',\n  'CB002',\n  'CB003',\n  'AA030'\n];\n\n// const PARKINGLOT_COLOR = [\n//   '#00AB55',\n//   '#000000',\n//   '#FFFFFF',\n//   '#FFC0CB',\n//   '#FF4842',\n//   '#1890FF',\n//   '#94D82D',\n//   '#FFC107'\n// ];\n\nconst parkinglots = [...Array(9)].map((_, index) => {\n  const setIndex = index + 1;\n\n  return {\n    id: faker.datatype.uuid(),\n    cover: mockImgParkinglot(setIndex),\n    name: PARKINGLOT_INFO[index].name,\n    address: PARKINGLOT_INFO[index].address,\n    code: PARKINGLOT_INFO[index].code,\n    price: faker.datatype.number({\n      min: 4,\n      max: 99,\n      precision: 0.01\n    }),\n    priceSale:\n      setIndex % 3\n        ? null\n        : faker.datatype.number({\n            min: 19,\n            max: 29,\n            precision: 0.01\n          }),\n    // colors:\n    //   (setIndex === 1 && PARKINGLOT_COLOR.slice(0, 1)) ||\n    //   (setIndex === 2 && PARKINGLOT_COLOR.slice(0, 2)) ||\n    //   (setIndex === 3 && PARKINGLOT_COLOR.slice(0, 3)) ||\n    //   (setIndex === 4 && PARKINGLOT_COLOR.slice(0, 4)) ||\n    //   (setIndex === 5 && PARKINGLOT_COLOR.slice(0, 5)) ||\n    //   (setIndex === 6 && PARKINGLOT_COLOR.slice(0, 6)) ||\n    //   PARKINGLOT_COLOR,\n    status: sample(['sale', 'new', '', ''])\n  };\n});\n\nexport default parkinglots;\n"]},"metadata":{},"sourceType":"module"}